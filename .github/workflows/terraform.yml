name: Terraform
on:
  workflow_call:
    inputs:
      path:
        description: 'Workspace path to run terraform in (relative to repository root)'
        type: string
        default: '/'
        required: false
      tailscale:
        description: 'Whether to connect the runner to the org tailnet'
        type: boolean
        default: false
        required: false
      vault:
        description: 'URL to the vault instance for automatic login'
        type: string
        default: ''
        required: false
      action:
        description: 'Terraform action to run: plan, apply or refresh'
        type: string
        default: plan
        required: false
      arguments:
        description: 'Extra arguments for terraform action step'
        type: string
        default: ''
        required: false
      init-arguments:
        description: 'Extra arguments for terraform init step'
        type: string
        default: ''
        required: false
      debug:
        description: 'Enable extra debug jobs to print additional logs'
        type: boolean
        default: false
        required: false
      environment:
        description: 'Environment to use for deployment (optional)'
        type: string
        default: "terraform"
        required: false
      env-file:
        description: "env file path for loading environment variables, e.g. production.env"
        type: string
        default: ""
        required: false
    outputs:
      plan-has-changes:
        description: 'Whether the outcome of the terraform plan indicated pending changes'
        value: ${{ jobs.terraform.outputs.plan-has-changes }}
      plan-output:
        description: 'Logged plan output'
        value: ${{ jobs.terraform.outputs.plan-output }}
      outputs:
        description: 'Terraform outputs encoded in json'
        value: ${{ jobs.terraform.outputs.outputs }}

permissions: write-all

env:
  TF_WORKSPACE: ${{ inputs.environment }}
  TF_CLI_ARGS: "-no-color"
  TF_CLI_ARGS_apply: "-auto-approve -input=false"
  TF_CLI_ARGS_plan: "-detailed-exitcode -input=false -out=tfplan"
  TF_CLI_ARGS_init: "-input=false -backend-config=bucket=${{ vars.GCP_PROJECT_ID }}-tf-state -backend-config=prefix=github/${{ github.repository }} ${{ inputs.init-arguments }}"

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    concurrency: ${{ inputs.environment }}/terraform/${{ inputs.path }}
    outputs:
      plan-has-changes: ${{ (steps.action.outputs.exitcode == '2') }}
      plan-output: ${{ (contains(inputs.action, 'plan') && format('{0}{1}', steps.action.outputs.stdout, steps.action.outputs.stderr)) }}
      outputs: ${{ (contains(inputs.action, 'output') && steps.action.outputs.stdout || steps.outputs.outputs.stdout) }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}/${{ inputs.path }}
    env:
      VAULT_ADDR: ${{ inputs.vault }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Load ENV File
      if: inputs.env-file != ''
      run: |
        cat ${{ github.workspace }}/${{ inputs.env-file }} >> $GITHUB_ENV

    - name: Setup 1Password
      uses: 1password/load-secrets-action/configure@v1
      with:
        service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
    
    - name: Load Tailscale Secrets
      id: tailscale-secrets
      if: inputs.tailscale
      uses: 1password/load-secrets-action@v1
      env:
        TAILSCALE_AUTHKEY: op://jtcressy-net-infra/tailscale-key-ghactions/password

    - name: Tailscale
      if: inputs.tailscale
      uses: tailscale/github-action@main
      with:
        version: '1.42.0'
        authkey: ${{ env.TAILSCALE_AUTHKEY }}
        
    - name: Decode Job OIDC Token (Debug)
      if: always() && (inputs.debug || contains(env.ACTIONS_STEP_DEBUG, 'true'))
      env:
        ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}
      run: |
        JWT=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://noneya")
        jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "$JWT"

    - name: Vault Login
      id: vault
      if: inputs.vault != ''
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ inputs.vault }}
        method: jwt
        role: github-action
        exportEnv: true
        exportToken: true

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
        project_id: ${{ vars.GCP_PROJECT_ID }}
        create_credentials_file: true
        export_environment_variables: true
        
    - name: Ensure TF State Bucket (${{ vars.GCP_PROJECT_ID }}-tf-state)
      id: state_bucket
      env:
        TF_STATE_BUCKET: ${{ vars.GCP_PROJECT_ID }}-tf-state
      run: |
        gcloud storage buckets describe gs://$TF_STATE_BUCKET || \
        gcloud storage buckets create gs://$TF_STATE_BUCKET
        bucket_json=$(gcloud storage buckets describe gs://$TF_STATE_BUCKET --format=json | jq -c)
        echo "bucket_json=$bucket_json" >> $GITHUB_OUTPUT

    - name: Query .terraform-version
      id: terraform-version
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ github.workspace }}/${{ inputs.path }}/.terraform-version

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        # terraform_wrapper: false
        terraform_version: ${{ steps.terraform-version.outputs.content }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -no-color -input=false
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Action
      id: action
      run: |
        terraform ${{ inputs.action }}
      continue-on-error: true
      env:
        TF_CLI_ARGS: "${{ env.TF_CLI_ARGS }} ${{ inputs.arguments }}"

    - name: Capture Outputs
      id: outputs
      run: |
        terraform output -json

    - name: Show Plan Output
      id: planout
      if: inputs.action == 'plan'
      run: |
        terraform show -no-color tfplan

    - name: Format Plan Output
      if: inputs.action == 'plan'
      run: |
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo '${{ steps.planout.outputs.stdout || steps.planout.outputs.stderr }}' | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Update Pull Request
      id: update-pull-request
      uses: actions-cool/maintain-one-comment@v2
      if: always() && inputs.action == 'plan' && github.event_name == 'pull_request'
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          <strong>Terraform Format and Style üñå <code>${{ steps.fmt.outcome }}</code></strong>
          <strong>Terraform Initialization ‚öôÔ∏è <code>${{ steps.init.outcome }}</code></strong>
          <details${{ (steps.validate.outcome != 'success' && ' open' || '') }}>
          <summary><strong>Terraform Validation ü§ñ<code>${{ steps.validate.outcome }}</code></strong></summary>
          <pre><code>${{ steps.validate.outputs.stdout }}
          ${{ steps.validate.outputs.stderr }}
          </code></pre>
          </details>
          <details${{ (steps.action.outcome != 'success' && ' open' || '') }}>
          <summary><strong>Terraform Plan üìñ<code>${{ (steps.action.outputs.exitcode == '2' && 'pending changes!') || steps.action.outcome }}</code></strong></summary>

          ```diff
          ${{ env.PLAN }}
          ```

          <details><summary>Show Plan STDOUT</summary><pre><code>${{ steps.action.outputs.stdout }}
          ${{ steps.action.outputs.stderr }}
          </code></pre>
          </details>
          </details>
          
          *Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`, Workflow: `${{ github.workflow }}`, Context: `${{ inputs.path }}`*
          <!-- created by terraform/${{ inputs.path }}/update-pull-request -->
        emojis: ''
        body-include: '<!-- created by terraform/${{ inputs.path }}/update-pull-request -->'
    
    - name: Terraform Action Status Check
      if: steps.action.outputs.exitcode != '0' && steps.action.outputs.exitcode != '2'
      env:
        PLAN_STDOUT: ${{ steps.action.outputs.stdout }}
        PLAN_STDERR: ${{ steps.action.outputs.stderr }}
      run: |
        echo $PLAN_STDOUT
        echo $PLAN_STDERR
        exit ${{ steps.action.outputs.exitcode }}
        
    - name: Tailscale
      if: always() && inputs.tailscale
      run: |
        sudo tailscale logout
        
    - name: Dump docker service logs
      if: always() && inputs.debug
      run: |
        docker ps -a
        echo "--- op-connect-sync ---"
        docker logs ${{ job.services.op-connect-sync.id }}
        echo "--- op-connect-api ---"
        docker logs ${{ job.services.op-connect-api.id }}
