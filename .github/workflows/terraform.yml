name: Terraform
on:
  workflow_call:
    inputs:
      path:
        description: 'Workspace path to run terraform in (relative to repository root)'
        type: string
        default: '/'
        required: false
      tailscale:
        description: 'Whether to connect the runner to the org tailnet'
        type: boolean
        default: false
        required: false
      vault:
        description: 'URL to the vault instance for automatic login'
        type: string
        default: ''
        required: false
      action:
        description: 'Terraform action to run: plan, apply or refresh'
        type: string
        default: plan
        required: false
      arguments:
        description: 'Extra arguments for terraform action step'
        type: string
        default: ''
        required: false
      debug:
        description: 'Enable extra debug jobs to print additional logs'
        type: boolean
        default: false
        required: false
    outputs:
      plan-has-changes:
        description: 'Whether the outcome of the terraform plan indicated pending changes'
        value: ${{ jobs.terraform.outputs.plan-has-changes }}
      plan-output:
        description: 'Logged plan output'
        value: ${{ jobs.terraform.outputs.plan-output }}

permissions: write-all

jobs:
  terraform:
    runs-on: ubuntu-latest
    concurrency: terraform
    outputs:
      plan-has-changes: ${{ (steps.action.outputs.exitcode == '2') }}
      plan-output: ${{ (contains(inputs.action, 'plan') && format('{0}{1}', steps.action.outputs.stdout, steps.action.outputs.stderr)) }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}/${{ inputs.path }}
    env:
      VAULT_ADDR: ${{ inputs.vault }}
    services:
      op-connect-api:
        image: 1password/connect-api:latest
        ports:
          - 8080:8080
        volumes:
          - op-data:/home/opuser/.op/data
        env:
          OP_SESSION: ${{ secrets.OP_CREDENTIALS_B64 }}
      op-connect-sync:
        image: 1password/connect-sync:latest
        ports:
          - 8081:8080
        volumes:
          - op-data:/home/opuser/.op/data
        env:
          OP_SESSION: ${{ secrets.OP_CREDENTIALS_B64 }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure 1Password Connect
      uses: 1password/load-secrets-action/configure@v1
      with:
        connect-host: http://localhost:8080
        connect-token: ${{ secrets.OP_CONNECT_TOKEN }}
    
    - name: Load Tailscale Secrets
      if: inputs.tailscale
      uses: 1password/load-secrets-action@v1.0.1
      env:
        TAILSCALE_AUTHKEY: op://jtcressy-net-infra/tailscale-key-ghactions/password

    - name: Tailscale
      if: inputs.tailscale
      uses: tailscale/github-action@main
      with:
        authkey: ${{ env.TAILSCALE_AUTHKEY }}
        
    - name: Decode Job OIDC Token (Debug)
      if: always() && (inputs.debug || contains(env.ACTIONS_STEP_DEBUG, 'true'))
      env:
        ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}
      run: |
        JWT=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://noneya")
        jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "$JWT"

    - name: Vault Login
      id: vault
      if: inputs.vault != ''
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ inputs.vault }}
        method: jwt
        role: github-action
        exportEnv: true
        exportToken: true

    - name: Set up gcloud Cloud SDK environment
      uses: google-github-actions/setup-gcloud@v0.6.2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Query .terraform-version
      id: terraform-version
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ github.workspace }}/${{ inputs.path }}/.terraform-version

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        # terraform_wrapper: false
        terraform_version: ${{ steps.terraform-version.outputs.content }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -no-color -input=false
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Action
      id: action
      run: |
        terraform ${{ inputs.action }} -no-color -input=false ${{ (contains(inputs.action, 'plan') && '-detailed-exitcode') || '' }} ${{ inputs.arguments }}
      continue-on-error: true

    - name: Update Pull Request
      id: update-pull-request
      uses: actions-cool/maintain-one-comment@v2
      if: always() && inputs.action == 'plan' && github.event_name == 'pull_request'
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          #### Terraform Format and Style 🖌`${{ steps.fmt.outcome }}`
          #### Terraform Initialization ⚙️`${{ steps.init.outcome }}`
          #### Terraform Validation 🤖`${{ steps.validate.outcome }}`
          ```
          ${{ steps.validate.outputs.stdout }}
          ${{ steps.validate.outputs.stderr }}
          ```
          #### Terraform Plan 📖`${{ (steps.action.outputs.exitcode == '2' && 'pending changes!') || steps.action.outcome }}`
          
          <details><summary>Show Plan</summary>
          
          ```
          ${{ steps.action.outputs.stdout }}
          ${{ steps.action.outputs.stderr }}
          ```
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`, Workflow: `${{ github.workflow }}`, Context: `${{ inputs.path }}`*
          <!-- created by terraform/${{ inputs.path }}/update-pull-request -->
        emojis: ''
        body-include: '<!-- created by terraform/${{ inputs.path }}/update-pull-request -->'
    
    - name: Terraform Action Status Check
      if: steps.action.outputs.exitcode != '0' && steps.action.outputs.exitcode != '2'
      env:
        PLAN_STDOUT: ${{ steps.action.outputs.stdout }}
        PLAN_STDERR: ${{ steps.action.outputs.stderr }}
      run: |
        echo $PLAN_STDOUT
        echo $PLAN_STDERR
        exit ${{ steps.action.outputs.exitcode }}
        
    - name: Tailscale
      if: always() && inputs.tailscale
      run: |
        sudo tailscale logout
        
    - name: Dump docker service logs
      if: always() && inputs.debug
      run: |
        docker ps -a
        echo "--- op-connect-sync ---"
        docker logs ${{ job.services.op-connect-sync.id }}
        echo "--- op-connect-api ---"
        docker logs ${{ job.services.op-connect-api.id }}
